import java.util.Scanner;
import java.util.*; 
/**
 * This class will 
 * 
 * @author Ruben Martinez
 */
public class main
{
    ArrayList<Player> players = new ArrayList<Player>();
    String action = "";
    static String gameMode = " ";
    int bluffer;
    int liarIndex = 0;
    int accuser = 0;
    public cardDeck gameDeck = new cardDeck();
    //public gameAction = new action();
    //public gameCounterAction = new counterAction();
    /**
     * This code plays the game
     * It will start and end the game
     * 
     */
    public void playGame()
    {
        Scanner userInput = new Scanner(System.in);
        System.out.println("Will you be playing with [A]mbassadors or [I]nquistors?");
        gameMode = userInput.nextLine();
        gameDeck.shuffle();
        
        String playerName = "";
        System.out.println("Enter the amount of players");
        int playerCount = userInput.nextInt();
        for(int i = 0; i < playerCount;i++)
        {
            System.out.println("Enter Player " + i + ":");
            playerName = userInput.nextLine();
            players.add(i,new Player(playerName));
            
            gameDeck.handOut(players.get(i));
        }
        display();
      
        int turn = 0;                            
        while(winCondition() == false)
        {
            System.out.println("Turn " + turn);
            for(int k = 0; k < players.size();k++)
            {
               display();
               action(players.get(k));
               
               System.out.println("Does any player call bluff (Enter index)");
               accuser = userInput.nextInt();
               liarIndex = callBluff(k,accuser,action);
               if(liarIndex != -1)
                 gameDeck.Discard(0,players.get(liarIndex));
               
               counter(players.get(k));
               
               System.out.println("Does any player call bluff (Enter index)");
               accuser = userInput.nextInt();
               liarIndex = callBluff(k,accuser,action);
               if(liarIndex != -1)gameDeck.Discard(0,players.get(liarIndex));
            }            
            turn++;
            for(int i = 0; i < players.size(); i++)
            {
                if(players.get(i).getCards() == 0)
                {
                    System.out.println(players.get(i).getName() + " is eliminated");
                    players.remove(i);
                    if(i != 0)i = i-1;
                }
                System.out.println(" ");
            }
        }
        
        System.out.println(players.get(0).getName() + " is the winner!");
    }
    
    /**
     * This will call a method in the action class which will handle all actions.
     * 
     */
    public String action(Player pCurrent)
    {
        System.out.println("It is your turn, " + pCurrent.getName());
        //gameAction.action(pCurrent);
        return "";
    }
    /**
     * This calls a method in the counterAction class which will handle all counteractions
     */
    public String counter(Player pCurrent)
    {
        System.out.println("It is your turn, " + pCurrent.getName());
        //gameCounterAction.counterAction(pCurrent);
        return "";
    }
    /**
     * 
     */
    public int callBluff(int currentPlayer,int accused, String action)
    {
        Player pCurrent = players.get(accused);
        if (accused == -1)
          return accused;     
        
        ArrayList<Card> tempHand = players.get(accused).getCardDeck();
          
        switch (action)
        {
            case "Tax":
               for(int k = 0; k <= tempHand.size(); k++)
              {
                  if(tempHand.get(k).getName().equals("Duke"))return currentPlayer;
              }
              return accused;
            case "Assassinate":
                 for(int k = 0; k <= tempHand.size(); k++)
                { 
                    if(tempHand.get(k).getName().equals("Assassin"))return currentPlayer;
                }
                return accused;
            case "Exchange":
                 for(int k = 0; k <= tempHand.size(); k++)
                { 
                    if(tempHand.get(k).getName().equals("Ambassador") || tempHand.get(k).getName().equals("Inquisitor"))return currentPlayer;
                }
                return accused;
                
            case "Steal":
                 for(int k = 0; k <= tempHand.size(); k++)
                { 
                             if(tempHand.get(k).getName().equals("Captain"))return currentPlayer;
                }
                return accused;
            case "BlockForeignAid":
                 for(int k = 0; k <= tempHand.size(); k++)
                { 
                    if(tempHand.get(k).getName().equals("Duke"))return currentPlayer;
                }
                return accused;
            case "BlockStealing":
                for(int k = 0; k <= tempHand.size(); k++)
                { 
                    if(tempHand.get(k).getName().equals("Assassin"))return currentPlayer;
                }
                return accused;
            case "BlockAssassination":
            
                 for(int k = 0; k <= tempHand.size(); k++)
                { 
                    if(tempHand.get(k).getName().equals("Assassin"))return currentPlayer;
                }
                return accused;
            }
        return currentPlayer;    
    }
    
    public static String getMode()
    {
        return gameMode.substring(0,1);
    }
    
    /**
     * This will display all information of all Players. It will use the methods within the Player class to display the informartion.
     * 
     */
    public String display()
    {
        for(int k = 0; k < players.size(); k++)
        {
            System.out.println(players.get(k).getName() + ": " + players.get(k).getTokens() + " Token(s)"
            + "       Influences :" + players.get(k).getCards()); 
        }
        
        return "";
    }
    
    /**
     * 
     * This will check to see if the player array has only one player in it.
     * If it does, it will return true. Otherwise, false.
     */
    public boolean winCondition()
    {
        return (1 == players.size());
    }
    
}
